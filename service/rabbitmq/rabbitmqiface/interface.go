// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package rabbitmqiface provides an interface to enable mocking the rabbitmq service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package rabbitmqiface

import (
	"github.com/KscSDK/ksc-sdk-go/service/rabbitmq"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

// RabbitmqAPI provides an interface to enable mocking the
// rabbitmq.Rabbitmq service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // rabbitmq.
//    func myFunc(svc rabbitmqiface.RabbitmqAPI) bool {
//        // Make svc.CreateInstance request
//    }
//
//    func main() {
//        sess := session.New()
//        svc := rabbitmq.New(sess)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockRabbitmqClient struct {
//        rabbitmqiface.RabbitmqAPI
//    }
//    func (m *mockRabbitmqClient) CreateInstance(input *map[string]interface{}) (*map[string]interface{}, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockRabbitmqClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type RabbitmqAPI interface {
	CreateInstance(*map[string]interface{}) (*map[string]interface{}, error)
	CreateInstanceWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	CreateInstanceRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DeleteInstance(*map[string]interface{}) (*map[string]interface{}, error)
	DeleteInstanceWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DeleteInstanceRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DescribeInstance(*map[string]interface{}) (*map[string]interface{}, error)
	DescribeInstanceWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DescribeInstanceRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DescribeInstances(*map[string]interface{}) (*map[string]interface{}, error)
	DescribeInstancesWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DescribeInstancesRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	UpgradeInstance(*map[string]interface{}) (*map[string]interface{}, error)
	UpgradeInstanceWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	UpgradeInstanceRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})
}

var _ RabbitmqAPI = (*rabbitmq.Rabbitmq)(nil)
